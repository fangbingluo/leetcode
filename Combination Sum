//DFS + backtracking

public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<Integer> list = new ArrayList<Integer>();
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Arrays.sort(candidates);
        dfs(0, candidates, target, list, res);
        
        return res;
    }
    
    public void dfs(int start, int[] nums, int target, List<Integer> list, List<List<Integer>> res){
        if(target == 0)
            res.add(new ArrayList<Integer>(list));
        
        for(int i = start; i < nums.length; i++){
            if(nums[i] > target)
                break;
            list.add(nums[i]);
            dfs(i, nums, target - nums[i], list, res);
            list.remove(list.size() - 1);
        }
        
    }
}
