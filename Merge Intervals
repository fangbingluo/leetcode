/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals.size() <= 1)
            return intervals;
            
       List<Interval> res = new ArrayList<Interval>();
       Collections.sort(intervals, new Comparator<Interval>(){
               public int compare(Interval a, Interval b){
                     return a.start - b.start;
               }
           });
           
       int i = 1;
       while(i <  intervals.size()){
           if(intervals.get(i).start <= intervals.get(i-1).end){
               intervals.get(i - 1).end = Math.max(intervals.get(i).end, intervals.get(i - 1).end);
               intervals.remove(i);
               continue;
           }
           i++;
       }
       return intervals;
    }
}
